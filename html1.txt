<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Hospital Management ‚Äî Frontend</title>
<style>
  :root { --bg:#0f172a; --card:#111827; --muted:#94a3b8; --text:#e5e7eb; --accent:#22c55e; --danger:#ef4444; --ring:#334155; }
  *{box-sizing:border-box} body{margin:0;background:linear-gradient(180deg,#0b1220,#0f172a);color:var(--text);font-family:system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial,sans-serif}
  header{position:sticky;top:0;background:#0b1220aa;backdrop-filter:blur(8px);border-bottom:1px solid #1f2937}
  .wrap{max-width:1100px;margin:0 auto;padding:16px}
  .title{display:flex;align-items:center;gap:10px;font-weight:700}
  .title span{font-size:12px;color:var(--muted)}
  nav{margin-top:10px;display:flex;flex-wrap:wrap;gap:8px}
  nav button{padding:8px 12px;border-radius:999px;border:1px solid #1f2937;background:#0b1220;color:var(--text);cursor:pointer}
  nav button.active{border-color:var(--accent);box-shadow:0 0 0 3px #22c55e22}
  main{padding:20px}
  .grid{display:grid;grid-template-columns:1fr;gap:16px}
  @media(min-width:900px){.grid{grid-template-columns:1fr 1fr}}
  .card{background:var(--card);border:1px solid #1f2937;border-radius:16px;box-shadow:0 10px 30px #0004}
  .card h2{margin:0;padding:16px;border-bottom:1px solid #1f2937}
  .card .body{padding:16px}
  .muted{color:var(--muted);font-size:14px}
  form .row{display:grid;grid-template-columns:1fr 1fr;gap:12px}
  form .row.single{grid-template-columns:1fr}
  label{display:block;font-size:13px;color:var(--muted);margin-bottom:6px}
  input,select{width:100%;padding:10px 12px;border-radius:10px;border:1px solid var(--ring);background:#0b1220;color:var(--text);outline:none}
  input:focus,select:focus{border-color:var(--accent);box-shadow:0 0 0 3px #22c55e22}
  .actions{display:flex;gap:10px;flex-wrap:wrap}
  .btn{padding:10px 14px;border-radius:10px;border:1px solid #1f2937;background:#111827;color:var(--text);cursor:pointer}
  .btn.primary{background:var(--accent);border-color:transparent;color:#0b1220;font-weight:700}
  .btn.ghost{background:transparent;border-color:#1f2937}
  .btn.danger{background:transparent;border-color:var(--danger);color:#fecaca}
  table{width:100%;border-collapse:collapse;border-radius:12px;overflow:hidden;border:1px solid #1f2937}
  th,td{padding:10px;border-bottom:1px solid #1f2937;text-align:left;font-size:14px}
  tr:hover td{background:#0b1220}
  .pill{display:inline-flex;align-items:center;padding:4px 8px;border-radius:999px;border:1px solid #1f2937;background:#0b1220;font-size:12px;color:var(--muted)}
  .searchbar{display:flex;gap:8px}
  .searchbar input{flex:1}
  .empty{padding:24px;border:1px dashed #334155;border-radius:12px;color:var(--muted);text-align:center}
  footer{padding:20px;color:var(--muted);text-align:center;border-top:1px solid #1f2937}
</style>
</head>
<body>
<header>
  <div class="wrap">
    <div class="title">üè• Hospital Management <span>Frontend only (local demo)</span></div>
    <nav id="tabs">
      <button data-tab="dashboard" class="active">Dashboard</button>
      <button data-tab="patients">Patients</button>
      <button data-tab="doctors">Doctors</button>
      <button data-tab="appointments">Appointments</button>
    </nav>
  </div>
</header>

<main class="wrap">
  <!-- DASHBOARD -->
  <section id="dashboard" class="tab">
    <div class="grid">
      <div class="card">
        <h2>Quick Stats</h2>
        <div class="body">
          <div class="grid">
            <div class="card">
              <h2>Patients</h2>
              <div class="body"><div class="pill"><span id="statPatients">0</span>&nbsp; total</div></div>
            </div>
            <div class="card">
              <h2>Doctors</h2>
              <div class="body"><div class="pill"><span id="statDoctors">0</span>&nbsp; total</div></div>
            </div>
            <div class="card">
              <h2>Appointments</h2>
              <div class="body"><div class="pill"><span id="statAppointments">0</span>&nbsp; total</div></div>
            </div>
          </div>
          <p class="muted" style="margin-top:14px">This demo stores data in your browser (localStorage). Refreshing keeps your data; ‚ÄúReset Demo‚Äù clears it.</p>
          <div class="actions" style="margin-top:10px">
            <button class="btn danger" id="resetDemo">Reset Demo</button>
          </div>
        </div>
      </div>

      <div class="card">
        <h2>How to integrate with Java later</h2>
        <div class="body">
          <ol class="muted">
            <li>Replace the <code>savePatient/saveDoctor/saveAppointment</code> functions with <code>fetch('/addPatient', { method:'POST', body:FormData })</code> to call your servlets.</li>
            <li>Replace <code>loadData()</code> with a GET request to your servlet that returns JSON.</li>
            <li>Keep the same HTML‚Äîonly the JS storage layer changes.</li>
          </ol>
        </div>
      </div>
    </div>
  </section>

  <!-- PATIENTS -->
  <section id="patients" class="tab" hidden>
    <div class="grid">
      <div class="card">
        <h2>Add Patient</h2>
        <div class="body">
          <form id="formPatient">
            <div class="row">
              <div>
                <label>Name</label>
                <input name="name" placeholder="e.g. Aisha Khan" required />
              </div>
              <div>
                <label>Age</label>
                <input name="age" type="number" min="0" max="120" required />
              </div>
            </div>
            <div class="row single" style="margin-top:10px">
              <div>
                <label>Disease / Concern</label>
                <input name="disease" placeholder="e.g. Flu" required />
              </div>
            </div>
            <div class="actions" style="margin-top:12px">
              <button class="btn primary" type="submit">Save Patient</button>
              <button class="btn ghost" type="reset">Clear</button>
            </div>
          </form>
        </div>
      </div>

      <div class="card">
        <h2>Patients List</h2>
        <div class="body">
          <div class="searchbar" style="margin-bottom:10px">
            <input id="searchPatients" placeholder="Search by name or disease..." />
            <button class="btn" id="exportPatients">Export JSON</button>
          </div>
          <div id="patientsTableWrap"></div>
        </div>
      </div>
    </div>
  </section>

  <!-- DOCTORS -->
  <section id="doctors" class="tab" hidden>
    <div class="grid">
      <div class="card">
        <h2>Add Doctor</h2>
        <div class="body">
          <form id="formDoctor">
            <div class="row">
              <div>
                <label>Name</label>
                <input name="name" placeholder="e.g. Dr. Vivek Rao" required />
              </div>
              <div>
                <label>Specialization</label>
                <input name="specialization" placeholder="e.g. Cardiology" required />
              </div>
            </div>
            <div class="actions" style="margin-top:12px">
              <button class="btn primary" type="submit">Save Doctor</button>
              <button class="btn ghost" type="reset">Clear</button>
            </div>
          </form>
        </div>
      </div>

      <div class="card">
        <h2>Doctors List</h2>
        <div class="body">
          <div class="searchbar" style="margin-bottom:10px">
            <input id="searchDoctors" placeholder="Search by name or specialization..." />
            <button class="btn" id="exportDoctors">Export JSON</button>
          </div>
          <div id="doctorsTableWrap"></div>
        </div>
      </div>
    </div>
  </section>

  <!-- APPOINTMENTS -->
  <section id="appointments" class="tab" hidden>
    <div class="grid">
      <div class="card">
        <h2>Book Appointment</h2>
        <div class="body">
          <form id="formAppointment">
            <div class="row">
              <div>
                <label>Patient</label>
                <select name="patientId" required id="apptPatient"></select>
              </div>
              <div>
                <label>Doctor</label>
                <select name="doctorId" required id="apptDoctor"></select>
              </div>
            </div>
            <div class="row" style="margin-top:10px">
              <div>
                <label>Date</label>
                <input name="date" type="date" required />
              </div>
              <div>
                <label>Time</label>
                <input name="time" type="time" required />
              </div>
            </div>
            <div class="row single" style="margin-top:10px">
              <div>
                <label>Notes (optional)</label>
                <input name="notes" placeholder="Any notes..." />
              </div>
            </div>
            <div class="actions" style="margin-top:12px">
              <button class="btn primary" type="submit">Book</button>
              <button class="btn ghost" type="reset">Clear</button>
            </div>
          </form>
        </div>
      </div>

      <div class="card">
        <h2>Appointments</h2>
        <div class="body">
          <div class="searchbar" style="margin-bottom:10px">
            <input id="searchAppointments" placeholder="Search by patient, doctor, or notes..." />
            <button class="btn" id="exportAppointments">Export JSON</button>
          </div>
          <div id="appointmentsTableWrap"></div>
        </div>
      </div>
    </div>
  </section>
</main>

<footer>Frontend demo ‚Ä¢ No server required ‚Ä¢ Replace storage with your Java endpoints when ready</footer>

<script>
/* ---------- Storage Layer (swap with fetch() to your Java servlets later) ---------- */
const DB = {
  load: (key) => JSON.parse(localStorage.getItem(key) || "[]"),
  save: (key, data) => localStorage.setItem(key, JSON.stringify(data)),
  nextId: (key) => {
    const k = key + "_seq";
    const n = parseInt(localStorage.getItem(k) || "1", 10);
    localStorage.setItem(k, String(n + 1));
    return n;
  },
  reset: () => {
    ["patients","doctors","appointments","patients_seq","doctors_seq","appointments_seq"].forEach(k=>localStorage.removeItem(k));
  }
};

let patients = DB.load("patients");
let doctors = DB.load("doctors");
let appointments = DB.load("appointments");

function persist() {
  DB.save("patients", patients);
  DB.save("doctors", doctors);
  DB.save("appointments", appointments);
  updateStats();
  renderAll();
}

/* ---------- Tabs ---------- */
const tabs = document.querySelectorAll('#tabs button');
const sections = document.querySelectorAll('main .tab');
tabs.forEach(b=>{
  b.addEventListener('click', ()=>{
    tabs.forEach(x=>x.classList.remove('active'));
    b.classList.add('active');
    sections.forEach(s=>s.hidden = s.id !== b.dataset.tab);
  });
});

/* ---------- Patients ---------- */
function savePatient(data){
  patients.push({ id: DB.nextId("patients"), ...data });
  persist();
}
function deletePatient(id){
  patients = patients.filter(p=>p.id!==id);
  // Also delete their appointments
  appointments = appointments.filter(a=>a.patientId!==id);
  persist();
}

/* ---------- Doctors ---------- */
function saveDoctor(data){
  doctors.push({ id: DB.nextId("doctors"), ...data });
  persist();
}
function deleteDoctor(id){
  doctors = doctors.filter(d=>d.id!==id);
  appointments = appointments.filter(a=>a.doctorId!==id);
  persist();
}

/* ---------- Appointments ---------- */
function saveAppointment(data){
  appointments.push({ id: DB.nextId("appointments"), ...data });
  persist();
}
function deleteAppointment(id){
  appointments = appointments.filter(a=>a.id!==id);
  persist();
}

/* ---------- Forms ---------- */
document.getElementById('formPatient').addEventListener('submit', e=>{
  e.preventDefault();
  const fd = new FormData(e.target);
  savePatient({
    name: fd.get('name').trim(),
    age: Number(fd.get('age')),
    disease: fd.get('disease').trim()
  });
  e.target.reset();
  alert('Patient saved!');
});

document.getElementById('formDoctor').addEventListener('submit', e=>{
  e.preventDefault();
  const fd = new FormData(e.target);
  saveDoctor({
    name: fd.get('name').trim(),
    specialization: fd.get('specialization').trim()
  });
  e.target.reset();
  alert('Doctor saved!');
});

document.getElementById('formAppointment').addEventListener('submit', e=>{
  e.preventDefault();
  const fd = new FormData(e.target);
  saveAppointment({
    patientId: Number(fd.get('patientId')),
    doctorId: Number(fd.get('doctorId')),
    date: fd.get('date'),
    time: fd.get('time'),
    notes: (fd.get('notes')||"").trim()
  });
  e.target.reset();
  alert('Appointment booked!');
});

/* ---------- Rendering ---------- */
function renderPatients(filter=""){
  const wrap = document.getElementById('patientsTableWrap');
  const list = patients.filter(p=>{
    const q = filter.toLowerCase();
    return p.name.toLowerCase().includes(q) || p.disease.toLowerCase().includes(q);
  });
  if(!list.length){ wrap.innerHTML = `<div class="empty">No patients yet.</div>`; return; }
  wrap.innerHTML = `
    <table>
      <thead><tr><th>ID</th><th>Name</th><th>Age</th><th>Disease</th><th></th></tr></thead>
      <tbody>
        ${list.map(p=>`
          <tr>
            <td>${p.id}</td>
            <td>${escapeHtml(p.name)}</td>
            <td>${p.age}</td>
            <td>${escapeHtml(p.disease)}</td>
            <td><button class="btn danger" onclick="deletePatient(${p.id})">Delete</button></td>
          </tr>`).join("")}
      </tbody>
    </table>
  `;
  populateApptSelects();
}

function renderDoctors(filter=""){
  const wrap = document.getElementById('doctorsTableWrap');
  const list = doctors.filter(d=>{
    const q = filter.toLowerCase();
    return d.name.toLowerCase().includes(q) || d.specialization.toLowerCase().includes(q);
  });
  if(!list.length){ wrap.innerHTML = `<div class="empty">No doctors yet.</div>`; return; }
  wrap.innerHTML = `
    <table>
      <thead><tr><th>ID</th><th>Name</th><th>Specialization</th><th></th></tr></thead>
      <tbody>
        ${list.map(d=>`
          <tr>
            <td>${d.id}</td>
            <td>${escapeHtml(d.name)}</td>
            <td>${escapeHtml(d.specialization)}</td>
            <td><button class="btn danger" onclick="deleteDoctor(${d.id})">Delete</button></td>
          </tr>`).join("")}
      </tbody>
    </table>
  `;
  populateApptSelects();
}

function renderAppointments(filter=""){
  const wrap = document.getElementById('appointmentsTableWrap');
  const list = appointments
    .map(a=>({
      ...a,
      patient: patients.find(p=>p.id===a.patientId)?.name || "Unknown",
      doctor: doctors.find(d=>d.id===a.doctorId)?.name || "Unknown",
      specialization: doctors.find(d=>d.id===a.doctorId)?.specialization || ""
    }))
    .filter(a=>{
      const q = filter.toLowerCase();
      return a.patient.toLowerCase().includes(q) ||
             a.doctor.toLowerCase().includes(q) ||
             (a.notes||"").toLowerCase().includes(q) ||
             a.specialization.toLowerCase().includes(q);
    })
    .sort((a,b)=> (a.date+a.time).localeCompare(b.date+b.time));

  if(!list.length){ wrap.innerHTML = `<div class="empty">No appointments yet.</div>`; return; }
  wrap.innerHTML = `
    <table>
      <thead><tr><th>ID</th><th>Patient</th><th>Doctor</th><th>Date</th><th>Time</th><th>Notes</th><th></th></tr></thead>
      <tbody>
        ${list.map(a=>`
          <tr>
            <td>${a.id}</td>
            <td>${escapeHtml(a.patient)}</td>
            <td>${escapeHtml(a.doctor)}</td>
            <td>${a.date}</td>
            <td>${a.time}</td>
            <td>${escapeHtml(a.notes || "")}</td>
            <td><button class="btn danger" onclick="deleteAppointment(${a.id})">Delete</button></td>
          </tr>`).join("")}
      </tbody>
    </table>
  `;
}

function populateApptSelects(){
  const pSel = document.getElementById('apptPatient');
  const dSel = document.getElementById('apptDoctor');
  pSel.innerHTML = patients.map(p=>`<option value="${p.id}">${escapeHtml(p.name)} (ID ${p.id})</option>`).join("");
  dSel.innerHTML = doctors.map(d=>`<option value="${d.id}">${escapeHtml(d.name)} ‚Äî ${escapeHtml(d.specialization)}</option>`).join("");
}

/* ---------- Search + Export ---------- */
document.getElementById('searchPatients').addEventListener('input', e=>renderPatients(e.target.value));
document.getElementById('searchDoctors').addEventListener('input', e=>renderDoctors(e.target.value));
document.getElementById('searchAppointments').addEventListener('input', e=>renderAppointments(e.target.value));

document.getElementById('exportPatients').addEventListener('click', ()=>downloadJSON('patients.json', patients));
document.getElementById('exportDoctors').addEventListener('click', ()=>downloadJSON('doctors.json', doctors));
document.getElementById('exportAppointments').addEventListener('click', ()=>downloadJSON('appointments.json', appointments));

/* ---------- Stats & Reset ---------- */
function updateStats(){
  document.getElementById('statPatients').textContent = patients.length;
  document.getElementById('statDoctors').textContent = doctors.length;
  document.getElementById('statAppointments').textContent = appointments.length;
}
document.getElementById('resetDemo').addEventListener('click', ()=>{
  if(confirm('This will clear all demo data. Continue?')){
    DB.reset();
    patients=[]; doctors=[]; appointments=[];
    persist();
  }
});

/* ---------- Helpers ---------- */
function escapeHtml(s){ return (s??"").replace(/[&<>"']/g, m=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;' }[m])); }
function downloadJSON(name, data){
  const blob = new Blob([JSON.stringify(data,null,2)],{type:'application/json'});
  const a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download = name; a.click();
  URL.revokeObjectURL(a.href);
}

/* ---------- Initial Render ---------- */
function renderAll(){
  renderPatients(document.getElementById('searchPatients').value || "");
  renderDoctors(document.getElementById('searchDoctors').value || "");
  renderAppointments(document.getElementById('searchAppointments').value || "");
  populateApptSelects();
}
updateStats(); renderAll();
</script>
</body>
</html>

